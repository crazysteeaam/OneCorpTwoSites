{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/zhengjie/COMAC/%E9%A1%B9%E7%9B%AE/02%20%E4%B8%8A%E9%A3%9E%E6%B5%B7%E5%85%B3%E8%9E%8D%E5%90%88%E9%A1%B9%E7%9B%AE/OneCorpTwoSites/components/AMapComponent.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\n// 声明全局 AMap 类型\ndeclare global {\n  interface Window {\n    AMap: any;\n    _AMapSecurityConfig?: any;\n  }\n}\n\nconst truckIcon = '/truck.png';\n\ninterface Props {\n  selectedRouteIdx: number | null;\n  setSelectedRouteIdx: (idx: number | null) => void;\n}\n\nconst AMapComponent = ({ selectedRouteIdx, setSelectedRouteIdx }: Props) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    let map: any;\n    let overlays: any[] = [];\n    if (typeof window !== 'undefined' && mapRef.current) {\n      // 设置高德安全密钥\n      window._AMapSecurityConfig = {\n        securityJsCode: 'bade43594a020944a72b111f21027000',\n      };\n      if (window.AMap) {\n        initMap();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = 'https://webapi.amap.com/maps?v=2.0&key=5934d3bbd34e2a0eb8f3de21c5a0c948&plugin=AMap.Driving';\n      script.async = true;\n      script.onload = () => {\n        if (window.AMap) {\n          initMap();\n        } else {\n          console.error('高德地图 SDK 加载失败');\n        }\n      };\n      script.onerror = () => {\n        console.error('高德地图 SDK 加载失败');\n      };\n      document.body.appendChild(script);\n    }\n\n    function clearOverlays() {\n      if (map && overlays.length > 0) {\n        overlays.forEach(o => map.remove(o));\n        overlays = [];\n      }\n    }\n\n    function initMap() {\n      try {\n        map = new window.AMap.Map(mapRef.current, {\n          zoom: 11,\n          center: [121.5737, 31.2337],\n          viewMode: '3D',\n          mapStyle: 'amap://styles/dark',\n          layers: [\n            new window.AMap.TileLayer.Satellite(),\n            new window.AMap.TileLayer.RoadNet()\n          ]\n        });\n\n        // 基地坐标\n        const dachang = [121.422082, 31.315288];\n        const pudong = [121.8577, 31.0857];\n\n        // 添加大场基地标记和label\n        const dachangMarker = new window.AMap.Marker({\n          position: dachang,\n          title: '上飞公司大场基地',\n          icon: new window.AMap.Icon({\n            size: new window.AMap.Size(48, 48),\n            image: '/station.png',\n            imageSize: new window.AMap.Size(48, 48)\n          }),\n          label: {\n            content: '<div style=\"color:#fff;font-weight:bold;font-size:16px;background:#222c;padding:2px 8px;border-radius:8px;\">大场基地</div>',\n            offset: new window.AMap.Pixel(-20, -50)\n          }\n        });\n\n        // 添加浦东基地标记和label\n        const pudongMarker = new window.AMap.Marker({\n          position: pudong,\n          title: '上飞公司浦东基地',\n          icon: new window.AMap.Icon({\n            size: new window.AMap.Size(48, 48),\n            image: '/station.png',\n            imageSize: new window.AMap.Size(48, 48)\n          }),\n          label: {\n            content: '<div style=\"color:#fff;font-weight:bold;font-size:16px;background:#222c;padding:2px 8px;border-radius:8px;\">浦东基地</div>',\n            offset: new window.AMap.Pixel(-20, -50)\n          }\n        });\n\n        map.add([dachangMarker, pudongMarker]);\n        overlays.push(dachangMarker, pudongMarker);\n\n        // 大场基地电子围栏四个拐点\n        const dachangPoints = [\n          [121.412, 31.322], // A\n          [121.432, 31.322], // B\n          [121.432, 31.308], // C\n          [121.412, 31.308]  // D\n        ];\n        // 浦东基地电子围栏四个拐点（新坐标，更贴合实际）\n        const pudongPoints = [\n          [121.832, 31.120], // 左上\n          [121.870, 31.120], // 右上\n          [121.870, 31.100], // 右下\n          [121.832, 31.100]  // 左下\n        ];\n\n        // 用Driving服务获取四段路网轨迹并拼接闭环（串行请求，防止QPS超限）\n        function drawFence(points, color, style, dashArray) {\n          let fencePath = [];\n          const segments = [[], [], [], []];\n          function requestSegment(i) {\n            if (i >= 4) {\n              // 拼接四段\n              fencePath = segments[0].concat(segments[1], segments[2], segments[3]);\n              const fence = new window.AMap.Polygon({\n                path: fencePath,\n                strokeColor: color,\n                strokeWeight: 5,\n                strokeOpacity: 1,\n                fillOpacity: 0,\n                strokeStyle: style,\n                strokeDasharray: dashArray || undefined\n              });\n              map.add(fence);\n              overlays.push(fence);\n              return;\n            }\n            const driving = new window.AMap.Driving({ policy: window.AMap.DrivingPolicy.LEAST_TIME });\n            driving.search(points[i], points[(i+1)%4], (status, result) => {\n              if (status === 'complete' && result.routes && result.routes.length > 0) {\n                let seg = [];\n                result.routes[0].steps.forEach(step => {\n                  if (step.path) seg = seg.concat(step.path);\n                });\n                segments[i] = seg;\n              } else {\n                console.error('电子围栏路径规划失败', points[i], points[(i+1)%4], result);\n              }\n              // 串行请求下一段，间隔600ms\n              setTimeout(() => requestSegment(i + 1), 600);\n            });\n          }\n          requestSegment(0);\n        }\n        // 大场：绿色实线\n        drawFence(dachangPoints, '#00FF00', 'solid', undefined);\n        // 浦东：黄色虚线\n        drawFence(pudongPoints, '#FFD700', 'dashed', [20, 20]);\n\n        // 多组起点终点，制造多条路线，并指定不同策略\n        const routePairs = [\n          // 大场到浦东\n          {\n            start: [121.422082, 31.315288],\n            end: [121.8577, 31.0857],\n            color: '#00FF00',\n            policy: window.AMap ? window.AMap.DrivingPolicy.LEAST_TIME : 0\n          },\n          // 浦东到大场\n          {\n            start: [121.8577, 31.0857],\n            end: [121.422082, 31.315288],\n            color: '#1E90FF',\n            policy: window.AMap ? window.AMap.DrivingPolicy.LEAST_DISTANCE : 1\n          },\n          // 大场到浦东（不同策略）\n          {\n            start: [121.419, 31.315288],\n            end: [121.8577, 31.081],\n            color: '#FF69B4',\n            policy: window.AMap ? window.AMap.DrivingPolicy.LEAST_FEE : 2\n          },\n          // 浦东到大场（不同策略）\n          {\n            start: [121.862, 31.0857],\n            end: [121.422082, 31.318],\n            color: '#FFD700',\n            policy: window.AMap ? window.AMap.DrivingPolicy.LEAST_TIME : 0\n          }\n        ];\n\n        window.AMap.plugin('AMap.Driving', function() {\n          routePairs.slice(0, 3).forEach((pair, idx) => {\n            if (selectedRouteIdx !== null && selectedRouteIdx !== idx) return;\n            const driving = new window.AMap.Driving({\n              map: null,\n              policy: pair.policy\n            });\n            driving.search(pair.start, pair.end, (status: string, result: any) => {\n              if (status === 'complete' && result.routes && result.routes.length > 0) {\n                const steps = result.routes[0].steps;\n                let path = [];\n                steps.forEach(step => {\n                  if (step.path) {\n                    path = path.concat(step.path);\n                  }\n                });\n                if (selectedRouteIdx !== null) {\n                  // 单车模式：已行驶实线，未行驶虚线\n                  const progress = Math.floor(path.length * 0.6);\n                  const passedPath = path.slice(0, progress);\n                  const futurePath = path.slice(progress - 1);\n                  if (passedPath.length > 1) {\n                    const passedPolyline = new window.AMap.Polyline({\n                      path: passedPath,\n                      strokeColor: pair.color,\n                      strokeWeight: 6,\n                      strokeOpacity: 1,\n                      isOutline: true,\n                      outlineColor: '#222',\n                      lineJoin: 'round',\n                      lineCap: 'round',\n                    });\n                    map.add(passedPolyline);\n                    overlays.push(passedPolyline);\n                  }\n                  if (futurePath.length > 1) {\n                    const futurePolyline = new window.AMap.Polyline({\n                      path: futurePath,\n                      strokeColor: pair.color,\n                      strokeWeight: 6,\n                      strokeOpacity: 1,\n                      isOutline: true,\n                      outlineColor: '#222',\n                      lineJoin: 'round',\n                      lineCap: 'round',\n                      strokeStyle: 'dashed',\n                      strokeDasharray: [20, 20]\n                    });\n                    map.add(futurePolyline);\n                    overlays.push(futurePolyline);\n                  }\n                } else {\n                  // 全局模式：全部用实线\n                  if (path.length > 1) {\n                    const polyline = new window.AMap.Polyline({\n                      path: path,\n                      strokeColor: pair.color,\n                      strokeWeight: 6,\n                      strokeOpacity: 1,\n                      isOutline: true,\n                      outlineColor: '#222',\n                      lineJoin: 'round',\n                      lineCap: 'round',\n                    });\n                    map.add(polyline);\n                    overlays.push(polyline);\n                  }\n                }\n                // 每条轨迹上只放1辆卡车\n                const truckIdx = Math.floor((path.length - 1) / 2);\n                const truckMarker = new window.AMap.Marker({\n                  position: path[truckIdx],\n                  icon: new window.AMap.Icon({\n                    size: new window.AMap.Size(40, 40),\n                    image: truckIcon,\n                    imageSize: new window.AMap.Size(40, 40)\n                  }),\n                  offset: new window.AMap.Pixel(-20, -20),\n                  extData: { routeIdx: idx }\n                });\n                truckMarker.on('click', () => {\n                  setSelectedRouteIdx(idx);\n                });\n                map.add(truckMarker);\n                overlays.push(truckMarker);\n              } else {\n                console.error('获取驾车数据失败：', result);\n              }\n            });\n          });\n        });\n      } catch (error) {\n        console.error('初始化地图失败:', error);\n      }\n    }\n\n    // 监听 selectedRouteIdx 变化，切换视图时清理并重绘\n    return () => {\n      clearOverlays();\n    };\n  }, [selectedRouteIdx, setSelectedRouteIdx]);\n\n  return (\n    <>\n      <div ref={mapRef} style={{ width: '100vw', height: '100vh' }} />\n      {selectedRouteIdx !== null && (\n        <button\n          style={{\n            position: 'absolute',\n            bottom: 40,\n            right: 40,\n            zIndex: 1000,\n            padding: '10px 20px',\n            fontSize: 16,\n            background: '#222c',\n            color: '#fff',\n            border: 'none',\n            borderRadius: 8,\n            cursor: 'pointer',\n            boxShadow: '0 2px 8px #00eaff33'\n          }}\n          onClick={() => setSelectedRouteIdx(null)}\n        >\n          返回全局\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default AMapComponent; "],"names":[],"mappings":"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","debugId":null}}]
}